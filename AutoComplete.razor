@typeparam TItem

<div class="autocomplete position-relative @(DarkMode ? "dark-mode" : "light-mode")"
     @onfocusout="HandleFocusOut">
    @foreach (var item in selectedItems)
    {
        <span class="autocomplete-chip">
            @DisplayItem(item)
            <button type="button" class="btn-close" @onclick="() => RemoveItem(item)"></button>
        </span>
    }

    <input type="search"
           @ref="inputRef"
           @bind="typedWord"
           @bind:event="oninput"
           @bind:after="SearchItem"
           @onkeydown="HandleKeyDown"
           @onfocus="ShowAllItems"
           placeholder="@Placeholder"
           disabled="@IsDisabled" />
</div>

@if (isDropdownOpen)
{
    <select class="autocomplete-select form-select mt-1"
            size="5"
            style="@(DarkMode ? "background-color: #2b2b2b; color: #d9dbdd" : "")"
            @onchange="HandleSelectChange">
        @if (filteredItems.Any())
        {
            @foreach (var item in filteredItems)
            {
                <option value="@DisplayItem(item)">@DisplayItem(item)</option>
            }
        }
        else if (!string.IsNullOrEmpty(typedWord))
        {
            <option disabled>@EmptyText</option>
        }
    </select>
}

@code {
    [Parameter, EditorRequired] public List<TItem> Items { get; set; } = [];
    [Parameter] public EventCallback<List<TItem>> SelectedItemsChanged { get; set; }
    [Parameter] public Func<TItem, string> DisplayItem { get; set; } = item => item?.ToString() ?? "";
    [Parameter] public string EmptyText { get; set; } = "No record found...";
    [Parameter] public string Placeholder { get; set; } = "Type to search...";
    [Parameter] public bool IsDisabled { get; set; }
    [Parameter] public bool DarkMode { get; set; }

    private string typedWord = string.Empty;
    private string searchedWord = string.Empty;
    private List<TItem> filteredItems = [];
    private List<TItem> selectedItems { get; set; } = [];
    private List<TItem> copyItems = [];
    private ElementReference inputRef = default!;
    private bool isDropdownOpen;

    protected override void OnInitialized()
    {
        copyItems = Items.ToList();
    }

    private void SearchItem()
    {
        if (!string.IsNullOrEmpty(typedWord))
        {
            filteredItems = copyItems
                .Where(i => DisplayItem(i).Contains(typedWord, StringComparison.OrdinalIgnoreCase) && !selectedItems.Contains(i))
                .ToList();
            isDropdownOpen = true;
        }
        else
        {
            filteredItems.Clear();
            isDropdownOpen = false;
        }
    }

    private async Task SelectItem(TItem item)
    {
        if (!selectedItems.Contains(item))
        {
            selectedItems.Add(item);
            typedWord = string.Empty;
            filteredItems.Clear();
            await SelectedItemsChanged.InvokeAsync(selectedItems);
            await inputRef.FocusAsync();
        }
    }

    private void ShowAllItems()
    {
        filteredItems = copyItems
            .Where(i => !selectedItems.Contains(i))
            .ToList();
        isDropdownOpen = filteredItems.Any();
    }

    private async Task RemoveItem(TItem item)
    {
        if (selectedItems.Contains(item))
        {
            selectedItems.Remove(item);
            await SelectedItemsChanged.InvokeAsync(selectedItems);
            SearchItem();
            await inputRef.FocusAsync();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "Backspace" when string.IsNullOrEmpty(typedWord) && selectedItems.Any():
                var lastItem = selectedItems.Last();
                selectedItems.Remove(lastItem);
                await SelectedItemsChanged.InvokeAsync(selectedItems);
                SearchItem();
                break;

            case "Escape":
                filteredItems.Clear();
                break;
        }
    }

    private async Task HandleFocusOut(FocusEventArgs e)
    {
        await Task.Delay(150);
        isDropdownOpen = false;
    }

    private async Task HandleSelectChange(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        if (string.IsNullOrEmpty(value))
            return;

        var selected = filteredItems.FirstOrDefault(x => DisplayItem(x) == value);
        if (selected != null)
            await SelectItem(selected);
    }
}
