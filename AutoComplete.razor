@typeparam TItem

<div class="autocomplete position-relative @(DarkMode ? "dark-mode" : "light-mode")"
     @onfocusout="HandleFocusOut"
     style="display:flex; flex-wrap:wrap; align-items:center; border:1px solid #ced4da; border-radius:.25rem; padding:.25rem; min-height:38px;">

    @foreach (var item in selectedItems)
    {
        <span class="autocomplete-chip">
            @DisplayItem(item)
            <button type="button" class="btn-close" @onclick="() => RemoveItem(item)"></button>
        </span>
    }

    <input type="search"
           @ref="inputRef"
           @bind="typedWord"
           @bind:event="oninput"
           @bind:after="SearchItem"
           @onkeydown="HandleKeyDown"
           @onfocus="ShowAllItems"
           placeholder="@Placeholder"
           disabled="@IsDisabled"
           class="flex-grow-1 border-0"
           style="min-width:120px; outline:none;" />

    @if (isDropdownOpen)
    {
        <div class="autocomplete-dropdown position-absolute"
             style="width:100%; max-height:200px; overflow-y:auto; z-index:1000; top:100%; left:0; @(DarkMode ? "background-color:#2b2b2b;color:#d9dbdd;" : "background-color:white;")">
            @if (filteredItems.Any())
            {
                @for (int i = 0; i < filteredItems.Count; i++)
                {
                    var item = filteredItems[i];
                    <div class="px-3 py-2 cursor-pointer @(i == highlightedIndex ? "bg-primary text-white" : "")"
                         @onclick="() => SelectItem(item)">
                        @DisplayItem(item)
                    </div>
                }
            }
            else if (!string.IsNullOrEmpty(typedWord))
            {
                <div class="px-3 py-2 text-muted small">@EmptyText</div>
            }
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired] public List<TItem> Items { get; set; } = [];
    [Parameter] public EventCallback<List<TItem>> SelectedItemsChanged { get; set; }
    [Parameter] public Func<TItem, string> DisplayItem { get; set; } = item => item?.ToString() ?? "";
    [Parameter] public string EmptyText { get; set; } = "No record found...";
    [Parameter] public string Placeholder { get; set; } = "Type to search...";
    [Parameter] public bool IsDisabled { get; set; }
    [Parameter] public bool DarkMode { get; set; }

    private string typedWord = string.Empty;
    private List<TItem> filteredItems = [];
    private List<TItem> selectedItems { get; set; } = [];
    private List<TItem> copyItems = [];
    private ElementReference inputRef = default!;
    private bool isDropdownOpen;
    private int highlightedIndex = -1;

    protected override void OnInitialized()
    {
        copyItems = Items.ToList();
    }

    private void SearchItem()
    {
        if (!string.IsNullOrEmpty(typedWord))
        {
            filteredItems = copyItems
                .Where(i => DisplayItem(i).Contains(typedWord, StringComparison.OrdinalIgnoreCase) && !selectedItems.Contains(i))
                .ToList();
            highlightedIndex = filteredItems.Any() ? 0 : -1;
            isDropdownOpen = filteredItems.Any();
        }
        else
        {
            filteredItems.Clear();
            highlightedIndex = -1;
            isDropdownOpen = false;
        }
    }

    private async Task SelectItem(TItem item)
    {
        if (!selectedItems.Contains(item))
        {
            selectedItems.Add(item);
            typedWord = string.Empty;
            filteredItems.Clear();
            highlightedIndex = -1;
            await SelectedItemsChanged.InvokeAsync(selectedItems);
            await inputRef.FocusAsync();
        }
    }

    private void ShowAllItems()
    {
        filteredItems = copyItems
            .Where(i => !selectedItems.Contains(i))
            .ToList();
        highlightedIndex = filteredItems.Any() ? 0 : -1;
        isDropdownOpen = filteredItems.Any();
    }

    private async Task RemoveItem(TItem item)
    {
        if (selectedItems.Contains(item))
        {
            selectedItems.Remove(item);
            await SelectedItemsChanged.InvokeAsync(selectedItems);
            SearchItem();
            await inputRef.FocusAsync();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (!isDropdownOpen) return;

        switch (e.Key)
        {
            case "ArrowDown":
                if (filteredItems.Any())
                {
                    highlightedIndex = (highlightedIndex + 1) % filteredItems.Count;
                    StateHasChanged();
                }
                break;
            case "ArrowUp":
                if (filteredItems.Any())
                {
                    highlightedIndex = (highlightedIndex - 1 + filteredItems.Count) % filteredItems.Count;
                    StateHasChanged();
                }
                break;
            case "Enter":
                if (highlightedIndex >= 0 && highlightedIndex < filteredItems.Count)
                {
                    await SelectItem(filteredItems[highlightedIndex]);
                }
                break;
            case "Backspace" when string.IsNullOrEmpty(typedWord) && selectedItems.Any():
                var lastItem = selectedItems.Last();
                selectedItems.Remove(lastItem);
                await SelectedItemsChanged.InvokeAsync(selectedItems);
                SearchItem();
                break;
            case "Escape":
                filteredItems.Clear();
                highlightedIndex = -1;
                isDropdownOpen = false;
                break;
        }
    }

    private async Task HandleFocusOut(FocusEventArgs e)
    {
        await Task.Delay(150);
        isDropdownOpen = false;
    }
}
